#!/usr/bin/env bash

# -----------------------------------------------------------------------------

# Copyright (c) 2016 Neil Smith <smith.neil.h@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------------------

# dont-panic is a wholly remarkable script - perhaps the most remarkable,
# certainly the most successful script to ever come out of the great
# publishing corporations of Ursa Minor. More popular than the Celestial
# Homecare Omnibus, better selling than 53 More Things to Do in
# Zsh, and more controversial than Oolon Colluphid's trilogy of
# philosophical blockbusters - Where Linus Went Wrong, Some More of Linus'
# Greatest Mistakes, and Who is This Linus Person Anyway? It's already
# supplanted the Encyclopedia Galactica as the standard repository of all
# knowledge and wisdom for two important reasons. First it's slightly
# cheaper. And second, it has the words "Don't Panic" printed in large,
# friendly letters on it's cover.

# -----------------------------------------------------------------------------

script_descrip="A CLI Bash program used to display system information at shell startup."
script_version="0.0.1"


#################
# Display helpers
#################

display_version() {
    printf "Dont Panic - Version ${script_version}\n"
    printf "Created by and licensed to Neil Smith <smith.neil.h@gmail.com>\n"
    exit 0
}

display_help() {
    printf "$(basename "$0") -- $script_descrip\n\n"
    printf "Usage:\n"
    printf "$(basename "$0") [-h] [-v]\n"
    exit 0
}

display_error() {
    printf "$1\n" >&2
    exit $2
}

display_message() {
    local message=(
        " ____    ___   _   _   _  _____ "
        "|  _ \  / _ \ | \ | | ( )|_   _|"
        "| | | || | | ||  \| | |/   | |  "
        "| |_| || |_| || |\  |      | |  "
        "|____/  \___/ |_| \_|      |_|  "
        " ____    _     _   _  ___  ____ "
        "|  _ \  / \   | \ | ||_ _|/ ___|"
        "| |_) |/ _ \  |  \| | | || |    "
        "|  __// ___ \ | |\  | | || |___ "
        "|_|  /_/   \_\|_| \_||___|\____|"
      )
    local column_count=$(tput cols)
    local row=0
    
    tput clear

    # print top bar
    tput setaf 3
    printf '%*s' "${COLUMNS:-$column_count}" '' | tr ' ' -
    tput sgr0
    ((row+=3))

    # print message
    local message_center_col="$((($column_count - ${#message[0]}) / 2))"

    tput setaf 1
    for line in "${message[@]}"; do
        tput cup $row $message_center_col
        printf "$line\n"
        ((++row))
    done
    ((row+=3))

    # print bottom bar
    tput setaf 3
    tput cup $row 0
    printf '%*s' "${COLUMNS:-$column_count}" '' | tr ' ' -
    tput sgr0
    ((row+=2))

    # print info

    display_info "OS" "$OS" $row $column_count
    ((row+=2))
    display_info "Kernel" "$Kernel" $row $column_count
    ((row+=2))
    display_info "User" "$User" $row $column_count
    ((row+=2))
    display_info "Host" "$Host" $row $column_count
    ((row+=2))
    display_info "Shell" "$Shell" $row $column_count
    ((row+=2))
    display_info "Packages" "$Packages" $row $column_count
    ((row+=2))
    display_info "Uptime" "$Uptime" $row $column_count
    ((row+=2))
    display_info "Cpu" "$Cpu" $row $column_count
    ((row+=2))
    display_info "Ram" "$Ram" $row $column_count
    ((row+=2))
    display_info "GTK" "$Gtk3" $row $column_count
    ((row+=2))
    display_info "Icons" "$Icons" $row $column_count
    ((row+=2))
    display_info "Font" "$Font" $row $column_count

    exit 0
}

display_info() {
    local label=$1
    local value=$2
    local row=$3
    local col_count=$4
    
    local col="$((($col_count - ${#label} ) / 2))"
    tput setaf 2
    tput cup $row $col 
    printf "$label\n"

    ((row+=1))
    col="$((($col_count - ${#value}) / 2))"
    tput setaf 4
    tput cup $row $col
    printf "$value\n"
}


################
# Detect Helpers
################

detect_os() {
    OS="unknown"    
    OS="$(cat /etc/*-release | grep PRETTY_NAME | cut -d '"' -f2)"
}

detect_kernel() {
    Kernel="unknown"
    Kernel="$(uname -m) $(uname -sr)"
}

detect_user() {
    User="unknown"
    User="$USER"
}

detect_host() {
    Host="unknown"
    Host="$HOSTNAME"
}

detect_shell() {
    Shell="unknown"
    Shell="$SHELL"
}

detect_packages() {
    Packages="unknown"
    Packages="$(pacman -Qq | wc -l)"
}

detect_uptime() {
    Uptime="unknown"
    Uptime="$(uptime | awk '{print $1}')"
}

detect_cpu() {
    Cpu="unknown"
    Cpu="$(less /proc/cpuinfo | grep "model name" | head -n1 | cut -d ":" -f2 | sed -e 's/^[[:space:]]*//')"
}

detect_ram() {
    Ram="unknown"
    Ram="$(cat /proc/meminfo | grep MemTotal | awk '{print $2 / 1024 / 1024 }') GB"
}

detect_gtk2() {
    Gtk2="$(gsettings get org.gnome.desktop.interface gtk-theme)"
}

detect_gtk3() {
    Gtk3="$(gsettings get org.gnome.desktop.interface gtk-theme)"
}

detect_icons() {
    Icons="$(gsettings get org.gnome.desktop.interface icon-theme)"
}

detect_font() {
    Font="$(gsettings get org.gnome.desktop.interface font-name)"
}


#######
# Flags
#######

case $1 in
    --help) display_help; exit 0 ;;
    --version) display_version; exit 0 ;;
esac

while getopts ":hv" flags; do
    case $flags in
        h) display_help; exit 0 ;;
        v) display_version; exit 0 ;;
        \?) display_error "Invalid option: -$OPTARG" 1 ;;
        :) display_error "Option -$OPTARG requires an argument" 1 ;;
    esac
done

detect_os
detect_kernel
detect_user
detect_host
detect_shell
detect_packages
detect_uptime
detect_cpu
detect_ram
detect_gtk2
detect_gtk3
detect_icons
detect_font

display_message

